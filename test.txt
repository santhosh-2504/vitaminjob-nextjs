import React, { useState } from 'react';
import params from 'query-params';
import { InfiniteLoader, List } from 'react-virtualized';
import { connect } from 'react-redux';
import {
  makeBasicJSONRequest,
  PortalGenericError,
} from 'portal-shared/security';
import { browserHistory } from 'react-router';
import { Box, Flex } from 'reflexbox';
import WindowSizeListener from 'react-window-size-listener';
import { getTranslatedString } from 'portal-shared/localization';
import { LoadingSpinner, PageDetails, MessageInline } from 'aperture';
import Translation from '@bv/aperture-components-react-translation';
import UserRow from '../../components/manager/userRow';
import FilterForm from './filter';
import { setFilter } from '../../actions/filter';
import './index.css';
import Button from '@bv/aperture-components-react-button';
import '@bv/aperture-components-react-filter-save-panel/dist/index.css';
import { IconActionAddBasic } from '@bv/aperture-components-react-icons';
import {
  FilterCategoryPanel,
  FilterCategory,
} from '@bv/aperture-components-react-filter-category-panel';
import {
  FilterSubCategoryPanel,
  FilterSubCategory,
} from '@bv/aperture-components-react-filter-sub-category-panel';
import Filter from '@bv/aperture-components-react-filter';
import SearchBar from '@bv/aperture-components-react-search-bar';
import {
  FilterCategoryDatePicker,
  filterDatePickerTrigger,
} from '@bv/aperture-components-react-filter-category-date-picker';
import FilterDataSort from '@bv/aperture-components-react-filter-data-sort';
import FilterDatePicker from '@bv/aperture-components-react-filter-date-picker';
import FilterSearchCombined from '@bv/aperture-components-react-filter-search-combined';
import FilterSearchOptions from '@bv/aperture-components-react-filter-search-options';
import BrowseCategories from '@bv/aperture-components-react-browse-categories';
import CheckboxGroup from '@bv/aperture-components-react-checkbox-group';
import DataTable from '@bv/aperture-components-react-data-table';
import Badge from '@bv/aperture-components-react-badge';
import Pagination from '@bv/aperture-components-react-pagination';

const LIST_PADDING = 40;
const NAV_HEIGHT = 96;
const FOOTER_HEIGHT = 54;
const LIST_PADDING_VERTICAL = 72;

const REASON_TO_ERROR_CODES = {
  MULTIPLE_SALESFORCE_ACCOUNTS: 'S009',
};

const styles = {
  noRows: {
    paddingTop: '1rem',
  },
  filterContainer: {
    width: 320,
  },
  listContainer: {
    background: 'white',
    paddingLeft: LIST_PADDING,
  },
  mainContainer: (containerHeight) => ({
    height: `${containerHeight}px`,
  }),
};

const SPINNER_HEIGHT = 50;

class UserList extends React.Component {
  constructor(props) {
    super(props);
    this.handleNew = this.handleNew.bind(this);
  }

  state = {
    containerHeight: 0,
    containerWidth: 0,
    depleted: false,
    nextLink: null,
    userList: [],
    filteredUserList: [],
    isLoading: false,
    dateRange: { start: null, end: null },
    filter: null,
    searchValue: '',
    activeOptionIds: [], // Initialize activeOptionIds
    categoryData: [], // Initialize categoryData
    selectedOption: '', // Initialize selectedOption
    filteredOptions: [],
    currentPage: 0, // Start with the first page
    pageSize: 25, // Number of users per page
  };

  loadUserList = () => {
    const { isLoading, depleted, nextLink } = this.state;
 
    // Avoid multiple backend calls while loading
    if (isLoading) {
      return;
    }
 
    this.setState({ isLoading: true });
 
    const { filter } = this.props;
    const filterParams = filter ? params.encode(filter) : '';
    const pathArray = nextLink && nextLink.split('/users');
    const url = pathArray
      ? `/users${pathArray.pop()}`
      : `/users?${filterParams}`;
 
     console.log(filterParams);
    if (depleted) {
      this.setState({ isLoading: false });
      return;
    }
 
    makeBasicJSONRequest(url, {
      method: 'get',
      headers: {
        'Content-Type': 'application/json',
      },
    })
      .then((res) => {
        const { data, next } = res;
        this.setState((prevState) => ({
          isLoading: false,
          nextLink: next,
          userList: prevState.userList.concat(data),
          filteredUserList: prevState.userList.concat(data), // Update filteredUserList with the full userList
          depleted: data.length < 400 || next === null,
        }));
      })
      .catch((res) => {
        this.setState({
          isLoading: false,
          error: res.message,
        });
      });
  };

  filterUserList = () => {
    const { searchValue, activeOptionIds, excludeInternal,filter} = this.state;
    const { dateRange } = this.state;
    const formatDate = (date) => date ? date.toISOString().split('T')[0] : null;
    const startDate = formatDate(this.state.dateRange.start);
    const endDate = formatDate(this.state.dateRange.end);
    const dateParams = startDate && endDate ? `&startDate=${startDate}&endDate=${endDate}` : '';
   console.log('Search Value:', activeOptionIds);
    // Construct the API URL with the search value
    const filterParams = `email=${encodeURIComponent(searchValue)}&firstName=${encodeURIComponent(searchValue)}&status=${activeOptionIds.join(',')}&excludeInternal=${filter?.excludeInternal || false}${dateParams}`;
  const url = `/users?cache_bust=${Math.floor(Math.random() * 1000)}&limit=40&${filterParams}`;
 
    this.setState({ isLoading: true });
 
    makeBasicJSONRequest(url, {
      method: 'get',
      headers: {
        'Content-Type': 'application/json',
      },
    })
      .then((res) => {
        const { data } = res;
        console.log('API Response:', data);
 
        // Update the state with the filtered data
        this.setState({
          filteredUserList: data,
          isLoading: false,
        });
      })
      .catch((error) => {
        console.error('Error fetching filtered user list:', error);
        this.setState({
          isLoading: false,
          error: error.message,
        });
      });
  };

  isUserLoaded = ({ index }) => !!this.state.userList[index];

  updateSearchValue = (value) => {
 
    this.setState({ searchValue: value }, this.filterUserList);
    console.log('Search Value:', this.filterUserList);
  };

  updateActiveOptionIds = (value) => {
    this.setState({ activeOptionIds: value });
  };

  updateCategoryData = (data) => {
    this.setState({ categoryData: data });
  };

  updateSelectedOption = (value) => {
    this.setState({ selectedOption: value });
  };

 
  updateFilter = (filter) => {
    const filterObject = filter ? filter.toJS() : {};
    if (filterObject.excludeInternal) {
      filterObject.internalUser = false;
    }
    if (filterObject.client) {
      filterObject.client = filterObject.client.value;
    }
    this.props.setFilter(filterObject);
    this.setState(
      {
        depleted: false,
        userList: [],
        nextLink: null,
      },
      (filter) => {
        if (!filter) {
          this.loadUserList();
        }
      },
    );
  };

  updateSize = (windowsize) => {
    const containerHeight =
      windowsize.windowHeight -
      (LIST_PADDING_VERTICAL + NAV_HEIGHT + FOOTER_HEIGHT);
    if (this.state.containerHeight !== containerHeight) {
      this.setState({ containerHeight });
    }

    const containerWidth = windowsize.windowWidth * 0.75 - LIST_PADDING;
    if (this.state.containerWidth !== containerWidth) {
      this.setState({ containerWidth });
    }
  };
  handlePageChange = (newPage) => {
    this.setState({ currentPage: newPage }, () => {
      // Optionally, you can trigger an API call here if pagination is server-side
      console.log(`Page changed to: ${newPage}`);
    });
  };

  onTypeAheadChange = (searchTerm) => {
    if (typeof searchTerm !== 'string') return;
 
    const typeaheadData = [
      { value: '123', label: 'Product 123' },
      { value: '456', label: 'Product 456' },
      { value: '789', label: 'Product 789' },
      { value: '135', label: 'Product 135' },
      { value: '246', label: 'Product 246' },
      {
        value: '579',
        label: 'Product 579 with truncation and tooltip kicking in',
      },
    ];
 
    const updatedFilteredOptions = typeaheadData.filter(({ label }) =>
      label.toLowerCase().includes(searchTerm.toLowerCase())
    );
 
    this.setState({ filteredOptions: updatedFilteredOptions });
  };

  handleNew() {
    browserHistory.push('/accounts/users/create');
  }

  // FIXME: remove these deprecated APIs: https://reactjs.org/blog/2018/03/27/update-on-async-rendering.html
  UNSAFE_componentWillMount() {
    if (!this.state.userList.length) {
      this.loadUserList();
    }
  }
 
  renderUser = ({ key, style, index }) => {
    const { userList } = this.state;
    const user = userList[index];
    if (user) {
      const editable = user.editable || this.props.isAccountViewer;
      return (
        <UserRow data={user} style={style} key={key} editable={editable} />
      );
    }
  };

  render() {
    const {
      containerHeight,
      containerWidth,
      error,
      isLoading,
      depleted,
      userList,
      searchValue,
      activeOptionIds,
      categoryData,
      selectedOption,
    } = this.state;
    const { currentPage, pageSize, filteredUserList } = this.state;
    const pageDetailProps = {
      headerButton: {
        text: (
          <Button
            iconLeft={<IconActionAddBasic iconFill="currentColor" />}
            onClick={this.handleNew}
            variant="destructive"
            className="create-user-button"
          >
            <span>
              <Translation namespaces="account-manager" keyName="createNewUser">
                Create user
              </Translation>
            </span>
          </Button>
        ),
        onClick: this.handleNew,
      },
    };
   
    // Errors here likely indicate a permissions issue.
    if (error) {
      return (
        <MessageInline status="error" type="inline">
          {error}
        </MessageInline>
      );
    }

    if (!containerHeight || !containerWidth) {
      return <WindowSizeListener onResize={this.updateSize} />;
    }
    const paginatedUsers = filteredUserList.slice(
      currentPage * pageSize,
      (currentPage + 1) * pageSize
    ); 

    return (
      <div className="user-list-container">
        <WindowSizeListener onResize={this.updateSize} />
        <div className="header-container">
          <span className="manage-users-text">
            <Translation namespaces="account-manager" keyName="manageUsers">
              Create and manage users for Bazaarvoice portal.
            </Translation>
          </span>
          <Button
            iconLeft={<IconActionAddBasic iconFill="currentColor" />}
            onClick={this.handleNew}
            variant="workflow"
          >
            <span>
              <Translation namespaces="account-manager" keyName="createNewUser">
                Create user
              </Translation>
            </span>
          </Button>
        </div>
        <Flex
          ref={(container) => {
            this.container = container;
          }}
        >
          <Box>
            <Filter
              search={
                <SearchBar
                  aria-label="Search"
                  onChange={(value) => this.updateSearchValue(value)}
                  onConfirm={(value) => this.updateSearchValue(value)}
                  value={this.state.searchValue}
                  inputProps={{ placeholder: 'Search by user name or email' }}
                  data-test-id="search"
                 
                />
               
              }
             
              categoryPanel={
                <FilterCategoryPanel
                  activeOptionIds={activeOptionIds}
                  cancelTrigger="Cancel"
                  categoriesClearText="Clear"
                  clearTrigger="Clear"
                  confirmTrigger="Apply and close"
                  data={this.state.categoryData}
                 
                  onOptionChange={(value) => this.updateActiveOptionIds(value)}
                  onConfirm={() => {
                    // Trigger the API call when "Apply and Close" is clicked
                    this.filterUserList();
                  }}
                >
                  <FilterCategoryDatePicker
                    trigger={filterDatePickerTrigger('Date')}
                    data-test-id="datepanel"
                  >
                    <FilterDatePicker
                      aria-labels={{
                        quickSelect: 'Quick select',
                        day: 'Day',
                        month: 'Month',
                        year: 'Year',
                        previous: 'Previous',
                        next: 'Next',
                      }}
                      placeholders={{
                        day: 'DD',
                        month: 'MM',
                        year: 'YYYY',
                      }}
                      datePickerLabels={{
                        start: 'Start Date',
                        end: 'End Date',
                      }}
                      quickSelectLabels={{
                        L7: 'Last 7 days',
                        L30: 'Last 30 days',
                        LM: 'Last month',
                        Y: 'Yesterday',
                        TM: 'This month',
                        TQ: 'This quarter',
                      }}
                    onChange={(dates) => this.setState({ dateRange: dates })}
                    />
                  </FilterCategoryDatePicker>
                  <FilterCategory id="access" trigger="Access">
                    {(onChange, data = {}, onOptionChange, activeOptionId) => (
                      <FilterSubCategoryPanel
                        {...{ onChange, data, onOptionChange, activeOptionId }}
                      >
                        <FilterSubCategory id="instance-id" trigger="Instance">
                          {(onInstanceIdChange, instanceIds = []) => (
                            <FilterSearchCombined
                              searchTypeMultipleLabel={null}
                              searchTypeSingleLabel={null}
                              addTrigger="Add"
                              label="INSTANCE"
                              options={instanceIds}
                              title="SELECTED INSTANCES"
                              inputProps={{
                                placeholder: 'Select instance',
                              }}
                              onChange={(options) =>
                                onInstanceIdChange(options)
                              }
                              onTypeAheadChange={(searchTerm) =>
                                this.onTypeAheadChange(searchTerm)
                              }
                              selectedOptions={instanceIds}
                              filteredOptions={this.state.filteredOptions || []}
                            />
                          )}
                        </FilterSubCategory>
                        <FilterSubCategory id="solution-id" trigger="Solution">
                          {(onSolutionIdChange, solutionIds = []) => (
                            <FilterSearchCombined
                              searchTypeMultipleLabel={null}
                              searchTypeSingleLabel={null}
                              addTrigger="Add"
                              label="SOLUTION"
                              options={solutionIds}
                              title="SELECTED SOLUTIONS"
                              inputProps={{
                                placeholder: 'Select solution',
                              }}
                              onChange={(options) =>
                                onSolutionIdChange(options)
                              }
                              onTypeAheadChange={(searchTerm) =>
                                this.onTypeAheadChange(searchTerm)
                              }
                              selectedOptions={solutionIds}
                              filteredOptions={this.state.filteredOptions || []}
                            />
                          )}
                        </FilterSubCategory>
                        <FilterSubCategory
                          id="portalrole-id"
                          trigger="Portal Role"
                        >
                          {(onPortalroleIdChange, portalroleIds = []) => (
                            <FilterSearchCombined
                              searchTypeMultipleLabel={null}
                              searchTypeSingleLabel={null}
                              addTrigger="Add"
                              label="PORTAL ROLE"
                              options={portalroleIds}
                              title="SELECTED ROLES"
                              inputProps={{
                                placeholder: 'Select role',
                              }}
                              onChange={(options) =>
                                onPortalroleIdChange(options)
                              }
                              onTypeAheadChange={(searchTerm) =>
                                this.onTypeAheadChange(searchTerm)
                              }
                              selectedOptions={portalroleIds}
                              filteredOptions={this.state.filteredOptions || []}
                            />
                          )}
                        </FilterSubCategory>
                      </FilterSubCategoryPanel>
                    )}
                  </FilterCategory>
                  <FilterCategory id="status" trigger="Status">
                    {(onChange, data = {}, onOptionChange, activeOptionId) => (
                      <FilterSubCategoryPanel
                        onChange={onChange}
                        data={data}
                        onOptionChange={onOptionChange}
                        activeOptionId={activeOptionId}
                       
                      >
                        {/* User Status */}
                        <FilterSubCategory
                          id="userStatus"
                          trigger="User status"
                        >
                          {(onSubCategoryChange, moderationStatus = []) => {
                            const defaultModerationStatus = [
                              {
                                label: 'Active',
                                value: 'ACTIVE',
                                checked: false,
                              },
                              {
                                label: 'Suspended',
                                value: 'SUSPENDED',
                                checked: false,
                              },
                              {
                                label: 'Staged',
                                value: 'STAGED',
                                checked: false,
                              },
                              {
                                label: 'Provisioned',
                                value: 'PROVISIONED',
                                checked: false,
                              },
                              {
                                label: 'Locked out',
                                value: 'LOCKED OUT',
                                checked: false,
                              },
                              {
                                label: 'Recovery',
                                value: 'RECOVERY',
                                checked: false,
                              },
                            ];
                            const options =
                            (moderationStatus ?? []).length > 0
                              ? moderationStatus
                              : defaultModerationStatus;

                            return (
                              <CheckboxGroup
                                aria-label="User status"
                                data-testid="user-status-checkbox-group"
                                label="User Status"     
                                name="userStatus"
                                onChange={(updatedOption) => {
                                  const updatedOptions = options.map((option) => ({
                                    ...option,
                                    checked: option.value === updatedOption.value ? !option.checked : option.checked,
                                  }));
                       
                                  const selectedStatuses = updatedOptions
                                    .filter((option) => option.checked)
                                    .map((option) => option.value);
                       
                                  this.updateActiveOptionIds(selectedStatuses);
                                  // Update activeOptionIds with selected statuses
                                 
                                  onSubCategoryChange(updatedOptions);
                                }}
                                options={options}
                              />
                            );
                          }}
                        </FilterSubCategory>

                        {/* User type */}
                        <FilterSubCategory id="usertype" trigger="User type">
                          {(onSubCategoryChange, moderationCodes = []) => {
                            const defaultModerationCodes = [
                              {
                                label: 'Internal users',
                                value: 'internal_users',
                                checked: false,
                              },
                              {
                                label: 'External users',
                                value: 'external_users',
                                checked: false,
                              },
                            ];

                            const options = moderationCodes.length
                              ? moderationCodes
                              : defaultModerationCodes;

                            return (
                              <CheckboxGroup
                                aria-label="User type"
                                data-testid="user-type-checkbox-group"
                                label="User type"
                                name="userType"
                                onChange={(updatedOption) => {
                                  const updatedOptions = options.map(
                                    (option) => ({
                                      ...option,
                                      checked:
                                        option.value === updatedOption.value
                                          ? !option.checked
                                          : option.checked,
                                    }),
                                  );

                                  onSubCategoryChange(updatedOptions);
                                }}
                                options={options}
                              />
                            );
                          }}
                        </FilterSubCategory>
                      </FilterSubCategoryPanel>
                    )}
                  </FilterCategory>
                </FilterCategoryPanel>
              }
              paginationControl={<span> 1 - 25 of 120 users. </span>}
             
            />
          </Box>
         
        </Flex>
        <DataTable
  className="custom-data-table"
  activeSort={{
    id: 'name',
    type: 'asc',
  }}
  alternatingRows
  applySort={() => {}}
  bodyAlignment={{
    status: 'center',
    dateCreated: 'right',
  }}
  columns={[
    {
      id: 'name',
      label: 'Name',
      value: (row) => {
        if (row.editable) {
          return (
            <a href={`/accounts/users/${row.id}`} className="user-link">
              {row.firstName && row.lastName
                ? `${row.firstName} ${row.lastName}`
                : row.name}
            </a>
          );
        } else {
          return row.name;
        }
      },
    },
    {
      id: 'email',
      label: 'Email Address',
      value: 'email',
    },
    {
      id: 'status',
      label: 'Status',
      value: (row) => {
        let badgeType;

        switch (row.status) {
          case 'ACTIVE':
            badgeType = 'success';
            break;
          case 'SUSPENDED':
            badgeType = 'critical';
            break;
          case 'PROVISIONED':
            badgeType = 'neutral';
            break;
          case 'STAGED':
            badgeType = 'neutral';
            break;
          case 'RECOVERY':
            badgeType = 'warning';
            break;
          case 'LOCKED OUT':
            badgeType = 'warning';
            break;
          default:
            badgeType = 'contrast';
        }
        return <Badge badgeType={badgeType}>{row.status}</Badge>;
      },
    },
    {
      id: 'created',
      label: 'Date Created',
      value: (row) => {
        if (!row.created) return 'N/A';

        const formattedDate = new Intl.DateTimeFormat('en-US', {
          day: '2-digit',
          month: 'short',
          year: 'numeric',
        }).format(new Date(row.created));

        return formattedDate;
      },
    },
  ]}
  data={paginatedUsers} // Use the paginated users
  headerAlignment={{
    status: 'center',
    dateCreated: 'right',
  }}
  noRowsRenderer={this.noRowsRenderer}
/>
<div className="pagination-container">
  <Pagination
  className="pagination-container"
    currentPage={this.state.currentPage}
    ellipsisLabels={{
      backward: 'Jump backward',
      forward: 'Jump forward',
    }}
    nextLabel="Next"
    onChange={this.handlePageChange}
    pageCount={Math.ceil(filteredUserList.length / pageSize)}
    previousLabel="Previous"
  />
</div>

      </div>
    );
  }
}

const mapStateToProps = (state) => {
  const filter = state.getIn(['accountmanager', 'filter']).toJS();
  const { permissions } = state.getIn(['login', 'userInfo']);
  const isAccountViewer =
    permissions.userRoles && permissions.userRoles.includes('ACCOUNT_VIEWER');
  return {
    filter,
    isAccountViewer,
  };
};

export default connect(mapStateToProps, { setFilter })(UserList);



